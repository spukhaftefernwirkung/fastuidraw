

in vec3 tex_coord_layer;
in vec3 secondary_tex_coord_layer;
flat in uint geometry_data_location;

#ifdef USE_UINT_TEXEL_FETCH
 uniform usampler2DArray glyph_texel_store;
#else
 uniform sampler2DArray glyph_texel_store;
#endif

#ifdef GLYPH_GEOMETRY_USE_TEXTURE_BUFFER
  uniform samplerBuffer glyph_geometry_data_store;
  #define fetch_glyph_geometry_data(block) texelFetch(glyph_geometry_data_store, int(block))

  #ifdef GL_ES
    precision highp samplerBuffer;
  #endif

#else
  #ifdef GL_ES
    precision highp sampler2DArray;
  #endif

  uniform sampler2DArray glyph_geometry_data_store;
  #define GLYPH_GEOM_WIDTH_PLUS_HEIGHT_LOG2 uint(GLYPH_GEOM_WIDTH_LOG2 + GLYPH_GEOM_HEIGHT_LOG2)
  #define GLYPH_GEOM_LAYER(T) (uint(T) >> GLYPH_GEOM_WIDTH_PLUS_HEIGHT_LOG2)
  #define GLYPH_GEOM_Y(T) FASTUIDRAW_EXTRACT_BITS(GLYPH_GEOM_WIDTH_LOG2, GLYPH_GEOM_HEIGHT_LOG2, T)
  #define GLYPH_GEOM_X(T) FASTUIDRAW_EXTRACT_BITS(0, GLYPH_GEOM_WIDTH_LOG2, T)
  #define GLYPH_GEOM_COORD(v) ivec3(GLYPH_GEOM_X(v), GLYPH_GEOM_Y(v), GLYPH_GEOM_LAYER(v))
  #define fetch_glyph_geometry_data(block) texelFetch(glyph_geometry_data_store, GLYPH_GEOM_COORD(block), 0)
#endif

uniform uint aa_mode;
uniform vec3 fg_color;


out vec4 color;


float
curvepair_pseudo_distance(in uint texel_value,
                          in vec2 glyph_position,
                          in uint geometry_offset);
float
curvepair_pseudo_distance(in uint texel_value,
                          in vec2 glyph_position,
                          in uint geometry_offset,
                          out vec2 grad);


void
main(void)
{
  uint texel0, texel1, texel;
  float f, a;
  vec2 df;

  #ifdef USE_UINT_TEXEL_FETCH
  {
    texel0 = texelFetch(glyph_texel_store, ivec3(tex_coord_layer), 0).r;
    if(secondary_tex_coord_layer.z >= 0.0)
      {
        texel1 = texelFetch(glyph_texel_store, ivec3(secondary_tex_coord_layer), 0).r;
      }
    else
      {
        texel1 = uint(0);
      }
  }
  #else
  {
    float ftexel;
    ftexel = texelFetch(glyph_texel_store, ivec3(tex_coord_layer), 0).r;
    /* the conversion formulas are somewhat amusing, but this is what
       is needed to get the value when the texture is accessed by a
       non-integer sampler type.
     */
    ftexel = (255.0 * ftexel + 0.5) / 256.0;
    texel0 = uint(255.0 * ftexel);

    if(secondary_tex_coord_layer.z >= 0.0)
      {
        ftexel = texelFetch(glyph_texel_store, ivec3(secondary_tex_coord_layer), 0).r;
        ftexel = (255.0 * ftexel + 0.5) / 256.0;
        texel1 = uint(255.0 * ftexel);
      }
    else
      {
        texel1 = uint(0);
      }
  }
  #endif

  texel = texel0 + (texel1 << uint(8));
  f = curvepair_pseudo_distance(texel, tex_coord_layer.xy, geometry_data_location, df);
  a = perform_aa(aa_mode, f,
                 dot(df, dFdx(tex_coord_layer.xy)),
                 dot(df, dFdy(tex_coord_layer.xy)),
                 tex_coord_layer.xy);

  color = vec4(fg_color, a);
}
